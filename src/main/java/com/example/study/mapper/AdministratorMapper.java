package com.example.study.mapper;

import com.example.study.object.Administrator;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.type.JdbcType;

public interface AdministratorMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table administrator
     *
     * @mbg.generated Mon May 06 09:30:31 CST 2019
     */
    @Delete({
        "delete from administrator",
        "where unit_id = #{unitId,jdbcType=VARCHAR}",
          "and id = #{id,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(@Param("unitId") String unitId, @Param("id") String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table administrator
     *
     * @mbg.generated Mon May 06 09:30:31 CST 2019
     */
    @Insert({
        "insert into administrator (unit_id, id, ",
        "name, phone, account_name, ",
        "account_password)",
        "values (#{unitId,jdbcType=VARCHAR}, #{id,jdbcType=VARCHAR}, ",
        "#{name,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{accountName,jdbcType=VARCHAR}, ",
        "#{accountPassword,jdbcType=VARCHAR})"
    })
    int insert(Administrator record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table administrator
     *
     * @mbg.generated Mon May 06 09:30:31 CST 2019
     */
    @Select({
        "select",
        "unit_id, id, name, phone, account_name, account_password",
        "from administrator",
        "where unit_id = #{unitId,jdbcType=VARCHAR}",
          "and id = #{id,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="unit_id", property="unitId", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="phone", property="phone", jdbcType=JdbcType.VARCHAR),
        @Result(column="account_name", property="accountName", jdbcType=JdbcType.VARCHAR),
        @Result(column="account_password", property="accountPassword", jdbcType=JdbcType.VARCHAR)
    })
    Administrator selectByPrimaryKey(@Param("unitId") String unitId, @Param("id") String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table administrator
     *
     * @mbg.generated Mon May 06 09:30:31 CST 2019
     */
    @Select({
        "select",
        "unit_id, id, name, phone, account_name, account_password",
        "from administrator"
    })
    @Results({
        @Result(column="unit_id", property="unitId", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="phone", property="phone", jdbcType=JdbcType.VARCHAR),
        @Result(column="account_name", property="accountName", jdbcType=JdbcType.VARCHAR),
        @Result(column="account_password", property="accountPassword", jdbcType=JdbcType.VARCHAR)
    })
    List<Administrator> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table administrator
     *
     * @mbg.generated Mon May 06 09:30:31 CST 2019
     */
    @Update({
        "update administrator",
        "set name = #{name,jdbcType=VARCHAR},",
          "phone = #{phone,jdbcType=VARCHAR},",
          "account_name = #{accountName,jdbcType=VARCHAR},",
          "account_password = #{accountPassword,jdbcType=VARCHAR}",
        "where unit_id = #{unitId,jdbcType=VARCHAR}",
          "and id = #{id,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(Administrator record);
}